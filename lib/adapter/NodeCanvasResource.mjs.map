{"version":3,"file":"NodeCanvasResource.mjs","sources":["../../src/adapter/NodeCanvasResource.ts"],"sourcesContent":["import { ALPHA_MODES, Resource, utils } from '@pixi/core';\r\nimport { NodeCanvasElement } from './NodeCanvasElement';\r\n\r\nimport type { BaseTexture, GLTexture, Renderer } from '@pixi/core';\r\n\r\n/**\r\n * A canvas resource using node-canvas\r\n * used for images, svg, and bitmap text\r\n */\r\nexport class NodeCanvasResource extends Resource\r\n{\r\n    /**\r\n     * The source element.\r\n     * @member {NodeCanvasElement}\r\n     * @readonly\r\n     */\r\n    public source: NodeCanvasElement | null;\r\n\r\n    /**\r\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\r\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\r\n     * @default false\r\n     * @private\r\n     */\r\n    public noSubImage: boolean;\r\n\r\n    constructor(source: NodeCanvasElement)\r\n    {\r\n        const sourceAny = source as any;\r\n        const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\r\n        const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\r\n\r\n        super(width, height);\r\n\r\n        this.source = source;\r\n        this.noSubImage = false;\r\n    }\r\n\r\n    override upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: HTMLCanvasElement): boolean\r\n    {\r\n        const gl = renderer.gl;\r\n        const width = baseTexture.realWidth;\r\n        const height = baseTexture.realHeight;\r\n\r\n        source = (source || this.source) as HTMLCanvasElement;\r\n\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\r\n\r\n        if (!this.noSubImage\r\n             && baseTexture.target === gl.TEXTURE_2D\r\n             && glTexture.width === width\r\n             && glTexture.height === height)\r\n        {\r\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format as number, glTexture.type, source);\r\n        }\r\n        else\r\n        {\r\n            glTexture.width = width;\r\n            glTexture.height = height;\r\n\r\n            gl.texImage2D(\r\n                baseTexture.target as number,\r\n                0,\r\n                glTexture.internalFormat,\r\n                baseTexture.format as number,\r\n                glTexture.type,\r\n                source\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\r\n     * Triggers one update in any case.\r\n     */\r\n    update(): void\r\n    {\r\n        if (this.destroyed)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const source = this.source as any;\r\n\r\n        const width = source.naturalWidth || source.videoWidth || source.width;\r\n        const height = source.naturalHeight || source.videoHeight || source.height;\r\n\r\n        this.resize(width, height);\r\n\r\n        super.update();\r\n    }\r\n\r\n    dispose(): void\r\n    {\r\n        this.source = null;\r\n    }\r\n\r\n    static override test(source: unknown): source is NodeCanvasElement\r\n    {\r\n        return source instanceof NodeCanvasElement;\r\n    }\r\n\r\n    /**\r\n     * Set cross origin based detecting the url and the crossorigin\r\n     * @param element - Element to apply crossOrigin\r\n     * @param url - URL to check\r\n     * @param crossorigin - Cross origin value to use\r\n     */\r\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void\r\n    {\r\n        if (crossorigin === undefined && !url.startsWith('data:'))\r\n        {\r\n            element.crossOrigin = utils.determineCrossOrigin(url);\r\n        }\r\n        else if (crossorigin !== false)\r\n        {\r\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}