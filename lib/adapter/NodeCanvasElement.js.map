{"version":3,"file":"NodeCanvasElement.js","sources":["../../src/adapter/NodeCanvasElement.ts"],"sourcesContent":["import canvasModule from 'canvas';\r\nimport createGLContext from 'gl';\r\nimport { ICanvasRenderingContext2D, utils } from '@pixi/core';\r\n\r\nimport type {\r\n    CanvasRenderingContext2D, JpegConfig, NodeCanvasRenderingContext2DSettings, PdfConfig, PngConfig,\r\n} from 'canvas';\r\nimport type {\r\n    STACKGL_resize_drawingbuffer, // eslint-disable-line camelcase\r\n    StackGLExtension,\r\n} from 'gl';\r\nimport type { ContextIds, ContextSettings, ICanvas, ICanvasRenderingContext2DSettings } from '@pixi/core';\r\n\r\nconst { Canvas, Image, createImageData } = canvasModule;\r\n\r\n/** Obtain the parameters of a function type in a tuple, except the first one */\r\ntype ParametersExceptFirst<T extends (...args: any) => any> = T extends (arg0: any, ...args: infer P) => any ? P : never;\r\n\r\n/**\r\n * A node implementation of a canvas element.\r\n * Uses node-canvas and gl packages to provide the same\r\n * functionality as a normal HTMLCanvasElement.\r\n * @class\r\n */\r\nexport class NodeCanvasElement implements ICanvas\r\n{\r\n    /** Style of the canvas. */\r\n    public style: Record<string, any>;\r\n\r\n    private _canvas: canvasModule.Canvas;\r\n    private _event: utils.EventEmitter;\r\n    private _contextType?: ContextIds;\r\n    private _ctx?: CanvasRenderingContext2D;\r\n    private _gl?: WebGLRenderingContext & StackGLExtension;\r\n    private _glExtensions?: {\r\n        resizeDrawingBuffer?: STACKGL_resize_drawingbuffer | null; // eslint-disable-line camelcase\r\n    };\r\n\r\n    constructor(width = 1, height = 1, type?: 'image' | 'pdf' | 'svg')\r\n    {\r\n        this._canvas = new Canvas(width, height, type);\r\n        this._event = new utils.EventEmitter();\r\n        this.style = {};\r\n    }\r\n\r\n    get width()\r\n    {\r\n        return this._canvas.width;\r\n    }\r\n\r\n    set width(value)\r\n    {\r\n        this._glExtensions?.resizeDrawingBuffer?.resize(value, this.height);\r\n        this._canvas.width = value;\r\n    }\r\n\r\n    get height()\r\n    {\r\n        return this._canvas.height;\r\n    }\r\n\r\n    set height(value)\r\n    {\r\n        this._glExtensions?.resizeDrawingBuffer?.resize(this.width, value);\r\n        this._canvas.height = value;\r\n    }\r\n\r\n    get clientWidth()\r\n    {\r\n        return this._canvas.width;\r\n    }\r\n\r\n    get clientHeight()\r\n    {\r\n        return this._canvas.height;\r\n    }\r\n\r\n    getContext(\r\n        contextId: '2d',\r\n        options?: ICanvasRenderingContext2DSettings | NodeCanvasRenderingContext2DSettings,\r\n    ): ICanvasRenderingContext2D | null;\r\n    getContext(\r\n        contextId: 'bitmaprenderer',\r\n        options?: ImageBitmapRenderingContextSettings | NodeCanvasRenderingContext2DSettings,\r\n    ): null;\r\n    getContext(\r\n        contextId: 'webgl' | 'experimental-webgl',\r\n        options?: WebGLContextAttributes | NodeCanvasRenderingContext2DSettings,\r\n    ): WebGLRenderingContext | null;\r\n    getContext(\r\n        contextId: 'webgl2' | 'experimental-webgl2',\r\n        options?: WebGLContextAttributes | NodeCanvasRenderingContext2DSettings,\r\n    ): null;\r\n    getContext(\r\n        type: ContextIds,\r\n        options?: ContextSettings | NodeCanvasRenderingContext2DSettings,\r\n    ): ICanvasRenderingContext2D | WebGLRenderingContext | null\r\n    {\r\n        switch (type)\r\n        {\r\n            case '2d':\r\n            {\r\n                if (this._contextType && this._contextType !== '2d') return null;\r\n                if (this._ctx) return this._ctx as unknown as ICanvasRenderingContext2D;\r\n\r\n                const ctx = this._canvas.getContext('2d', options as NodeCanvasRenderingContext2DSettings);\r\n\r\n                this._patch2DContext(ctx);\r\n\r\n                this._ctx = ctx;\r\n                this._contextType = '2d';\r\n\r\n                return ctx as unknown as ICanvasRenderingContext2D;\r\n            }\r\n            case 'webgl':\r\n            case 'experimental-webgl':\r\n            {\r\n                if (this._contextType && this._contextType !== 'webgl') return null;\r\n                if (this._gl) return this._gl;\r\n\r\n                const { width, height } = this;\r\n\r\n                const ctx = this._canvas.getContext('2d', options as NodeCanvasRenderingContext2DSettings);\r\n                const gl = createGLContext(width, height, options as WebGLContextAttributes);\r\n\r\n                this._patchGLContext(gl);\r\n\r\n                this._ctx = ctx;\r\n                this._gl = gl;\r\n                this._glExtensions = {\r\n                    resizeDrawingBuffer: gl.getExtension('STACKGL_resize_drawingbuffer'),\r\n                };\r\n                this._contextType = 'webgl';\r\n\r\n                return gl;\r\n            }\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For image canvases, encodes the canvas as a PNG. For PDF canvases,\r\n     * encodes the canvas as a PDF. For SVG canvases, encodes the canvas as an\r\n     * SVG.\r\n     */\r\n    toBuffer(cb: (err: Error | null, result: Buffer) => void): void;\r\n    toBuffer(cb: (err: Error | null, result: Buffer) => void, mimeType: 'image/png', config?: PngConfig): void;\r\n    toBuffer(cb: (err: Error | null, result: Buffer) => void, mimeType: 'image/jpeg', config?: JpegConfig): void;\r\n    /**\r\n     * For image canvases, encodes the canvas as a PNG. For PDF canvases,\r\n     * encodes the canvas as a PDF. For SVG canvases, encodes the canvas as an\r\n     * SVG.\r\n     */\r\n    toBuffer(): Buffer;\r\n    toBuffer(mimeType: 'image/png', config?: PngConfig): Buffer;\r\n    toBuffer(mimeType: 'image/jpeg', config?: JpegConfig): Buffer;\r\n    toBuffer(mimeType: 'application/pdf', config?: PdfConfig): Buffer;\r\n    /**\r\n     * Returns the unencoded pixel data, top-to-bottom. On little-endian (most)\r\n     * systems, the array will be ordered BGRA; on big-endian systems, it will\r\n     * be ARGB.\r\n     */\r\n    toBuffer(mimeType: 'raw'): Buffer;\r\n    /**\r\n     * Returns a buffer of the canvas contents.\r\n     * @param args - the arguments to pass to the toBuffer method\r\n     */\r\n    toBuffer(...args: any): Buffer | void\r\n    {\r\n        this._updateContext();\r\n\r\n        return this._canvas.toBuffer(...args as Parameters<typeof canvasModule.Canvas.prototype.toBuffer>);\r\n    }\r\n\r\n    /** Defaults to PNG image. */\r\n    toDataURL(): string;\r\n    toDataURL(mimeType: 'image/png'): string;\r\n    toDataURL(mimeType: 'image/jpeg', quality?: number): string;\r\n    /** _Non-standard._ Defaults to PNG image. */\r\n    toDataURL(cb: (err: Error | null, result: string) => void): void;\r\n    /** _Non-standard._ */\r\n    toDataURL(mimeType: 'image/png', cb: (err: Error | null, result: string) => void): void;\r\n    /** _Non-standard._ */\r\n    toDataURL(mimeType: 'image/jpeg', cb: (err: Error | null, result: string) => void): void;\r\n    /** _Non-standard._ */\r\n    toDataURL(mimeType: 'image/jpeg', config: JpegConfig, cb: (err: Error | null, result: string) => void): void;\r\n    /** _Non-standard._ */\r\n    toDataURL(mimeType: 'image/jpeg', quality: number, cb: (err: Error | null, result: string) => void): void;\r\n    /**\r\n     * Returns a base64 encoded string representation of the canvas.\r\n     * @param args - The arguments to pass to the toDataURL method.\r\n     */\r\n    toDataURL(...args: any): string | void\r\n    {\r\n        this._updateContext();\r\n\r\n        return this._canvas.toDataURL(...args as Parameters<typeof canvasModule.Canvas.prototype.toDataURL>);\r\n    }\r\n\r\n    /**\r\n     * Adds the listener for the specified event.\r\n     * @param type - The type of event to listen for.\r\n     * @param listener - The callback to invoke when the event is fired.\r\n     */\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject)\r\n    {\r\n        return this._event.addListener(type, listener as any);\r\n    }\r\n\r\n    /**\r\n     * Removes the listener for the specified event.\r\n     * @param type - The type of event to listen for.\r\n     * @param listener - The callback to invoke when the event is fired.\r\n     */\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject)\r\n    {\r\n        if (listener)\r\n        {\r\n            return this._event.removeListener(type, listener as any);\r\n        }\r\n\r\n        return this._event.removeAllListeners(type);\r\n    }\r\n\r\n    /**\r\n     * Dispatches the specified event.\r\n     * @param event - The event to emit.\r\n     * @param event.type - The type of event.\r\n     */\r\n    dispatchEvent(event: {type: string, [key: string]: any})\r\n    {\r\n        event.target = this;\r\n\r\n        return this._event.emit(event.type, event);\r\n    }\r\n\r\n    /** Read canvas pixels as Uint8Array. */\r\n    private _getPixels(): Uint8Array\r\n    {\r\n        switch (this._contextType)\r\n        {\r\n            case '2d':\r\n            {\r\n                const { width, height, _ctx: ctx } = this;\r\n\r\n                const imageData = ctx?.getImageData(0, 0, width, height);\r\n\r\n                if (imageData)\r\n                {\r\n                    const { buffer, byteOffset, length } = imageData.data;\r\n\r\n                    return new Uint8Array(buffer, byteOffset, length);\r\n                }\r\n\r\n                return new Uint8Array(0);\r\n            }\r\n            case 'webgl':\r\n            {\r\n                const { width, height, _gl: gl } = this;\r\n\r\n                const lineByteCount = 4 * width;\r\n                const pixels = new Uint8Array(height * lineByteCount);\r\n\r\n                gl?.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n\r\n                const tmp = new Uint8Array(lineByteCount);\r\n\r\n                // Reverse row order\r\n                for (let srcRow = 0; srcRow < height >> 1; srcRow++)\r\n                {\r\n                    const dstRow = height - srcRow - 1;\r\n                    const srcIndex = srcRow * lineByteCount;\r\n                    const dstIndex = dstRow * lineByteCount;\r\n                    const src = pixels.subarray(srcIndex, srcIndex + lineByteCount);\r\n                    const dst = pixels.subarray(dstIndex, dstIndex + lineByteCount);\r\n\r\n                    tmp.set(dst);\r\n                    dst.set(src);\r\n                    src.set(tmp);\r\n                }\r\n\r\n                return pixels;\r\n            }\r\n            default:\r\n            {\r\n                throw new Error('getContext() has not been called');\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Copy pixels from GL context to 2D context. */\r\n    private _updateContext()\r\n    {\r\n        if (this._contextType === 'webgl')\r\n        {\r\n            const { width, height, _ctx: ctx } = this;\r\n\r\n            const pixels = this._getPixels();\r\n            const imageData = createImageData(new Uint8ClampedArray(pixels.buffer), width, height);\r\n\r\n            ctx?.putImageData(imageData, 0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Patch the 2D context.\r\n     * @param ctx - The 2D context.\r\n     */\r\n    private _patch2DContext(ctx: CanvasRenderingContext2D)\r\n    {\r\n        const _drawImage = ctx.drawImage;\r\n\r\n        ctx.drawImage = function drawImage(image: any, ...args: any)\r\n        {\r\n            if (image instanceof NodeCanvasElement)\r\n            {\r\n                image._updateContext();\r\n                image = image._canvas;\r\n            }\r\n\r\n            return _drawImage.call(this, image, ...args as ParametersExceptFirst<typeof _drawImage>);\r\n        };\r\n\r\n        const _createPattern = ctx.createPattern;\r\n\r\n        ctx.createPattern = function createPattern(image: any, ...args: any)\r\n        {\r\n            if (image instanceof NodeCanvasElement)\r\n            {\r\n                image._updateContext();\r\n                image = image._canvas;\r\n            }\r\n\r\n            return _createPattern.call(this, image, ...args as ParametersExceptFirst<typeof _createPattern>);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Patch the GL context.\r\n     * @param gl - The GL context.\r\n     */\r\n    private _patchGLContext(gl: WebGLRenderingContext & StackGLExtension)\r\n    {\r\n        const _getUniformLocation = gl.getUniformLocation;\r\n\r\n        type Program = WebGLProgram & { _uniforms: any[] };\r\n        // Temporary fix https://github.com/stackgl/headless-gl/issues/170\r\n        gl.getUniformLocation = function getUniformLocation(program: Program, name)\r\n        {\r\n            if (program._uniforms && !(/\\[\\d+\\]$/).test(name))\r\n            {\r\n                const reg = new RegExp(`${name}\\\\[\\\\d+\\\\]$`);\r\n\r\n                for (let i = 0; i < program._uniforms.length; i++)\r\n                {\r\n                    const _name = program._uniforms[i].name;\r\n\r\n                    if (reg.test(_name))\r\n                    {\r\n                        name = _name;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return _getUniformLocation.call(this, program, name);\r\n        };\r\n\r\n        /**\r\n         * Convert TexImageSource argument for GL context.\r\n         * @param source\r\n         */\r\n        function convertTexImageSource(source: any): any\r\n        {\r\n            if (source instanceof NodeCanvasElement)\r\n            {\r\n                source._updateContext();\r\n\r\n                return source;\r\n            }\r\n            if (source instanceof Image)\r\n            {\r\n                const { width, height } = source;\r\n                const canvas = new Canvas(width, height);\r\n\r\n                canvas.getContext('2d').drawImage(source, 0, 0);\r\n\r\n                return source;\r\n            }\r\n\r\n            return source;\r\n        }\r\n\r\n        const _texImage2D = gl.texImage2D;\r\n\r\n        gl.texImage2D = function texImage2D(...args: any)\r\n        {\r\n            args[args.length - 1] = convertTexImageSource(args[args.length - 1]);\r\n\r\n            return _texImage2D.apply(this, args);\r\n        };\r\n\r\n        const _texSubImage2D = gl.texSubImage2D;\r\n\r\n        gl.texSubImage2D = function texSubImage2D(...args: any)\r\n        {\r\n            args[args.length - 1] = convertTexImageSource(args[args.length - 1]);\r\n\r\n            return _texSubImage2D.apply(this, args);\r\n        };\r\n    }\r\n}\r\n"],"names":["utils"],"mappings":"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"}