{"version":3,"file":"adapter.mjs","sources":["../../src/adapter/adapter.ts"],"sourcesContent":["import canvasModule from 'canvas';\r\nimport { fetch, Request, Response } from 'cross-fetch';\r\nimport fs from 'fs';\r\nimport { WebGLRenderingContext } from 'gl';\r\nimport { settings, utils } from '@pixi/core';\r\nimport { NodeCanvasElement } from './NodeCanvasElement';\r\nimport { DOMParser } from '@xmldom/xmldom';\r\n\r\nimport type { IAdapter } from '@pixi/core';\r\n\r\nexport const NodeAdapter = {\r\n    /**\r\n     * Creates a canvas element of the given size.\r\n     * This canvas is created using the node-canvas package and uses the gl package to create a webgl context.\r\n     * @param width - width of the canvas\r\n     * @param height - height of the canvas\r\n     */\r\n    createCanvas: (width?: number, height?: number) => new NodeCanvasElement(width, height),\r\n    getCanvasRenderingContext2D: () => canvasModule.CanvasRenderingContext2D,\r\n    /** Returns a WebGL rendering context using the gl package. */\r\n    getWebGLRenderingContext: () => WebGLRenderingContext,\r\n    /** Returns the fake user agent string of `node` */\r\n    getNavigator: () => ({ userAgent: 'node' }),\r\n    /** Returns the path from which the process is being run */\r\n    getBaseUrl: () => process.cwd(),\r\n    getFontFaceSet: (): any => null,\r\n    fetch: (url: RequestInfo, options?: RequestInit) =>\r\n    {\r\n        const request = new Request(url, options);\r\n\r\n        // Check if urls starts with http(s) as only these are supported by node-fetch\r\n        if (utils.path.isUrl(request.url))\r\n        {\r\n            return fetch(url, request);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            // Request transforms paths and encodeURIs, but for filesystem requests,\r\n            // it's better to use the raw string (path).\r\n            // If url is a request instead, decode the URI before trying to access the file\r\n            const rawPath = typeof url === 'string' ? url : decodeURI(request.url);\r\n\r\n            // Normalize the path\r\n            const filePath = utils.path.normalize(rawPath);\r\n\r\n            if (!fs.existsSync(filePath))\r\n            {\r\n                reject(`File not found: ${filePath}`);\r\n            }\r\n            const readStream = fs.createReadStream(filePath);\r\n\r\n            readStream.on('open', () =>\r\n            {\r\n                resolve(new Response(readStream as unknown as ReadableStream, {\r\n                    url: request.url,\r\n                    status: 200,\r\n                    statusText: 'OK',\r\n                    size: fs.statSync(filePath).size,\r\n                    timeout: (request as any).timeout,\r\n                } as ResponseInit));\r\n            });\r\n        });\r\n    },\r\n    parseXML: (xml: string) =>\r\n    {\r\n        const parser = new DOMParser();\r\n\r\n        return parser.parseFromString(xml, 'text/xml');\r\n    },\r\n} as unknown as IAdapter;\r\n\r\nsettings.ADAPTER = NodeAdapter;\r\n\r\nexport { settings };\r\n"],"names":[],"mappings":";;;;;;;;;AAUO,MAAM,WAAc,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOvB,cAAc,CAAC,KAAA,EAAgB,WAAoB,IAAI,iBAAA,CAAkB,OAAO,MAAM,CAAA;AAAA,EACtF,2BAAA,EAA6B,MAAM,YAAa,CAAA,wBAAA;AAAA;AAAA,EAEhD,0BAA0B,MAAM,qBAAA;AAAA;AAAA,EAEhC,YAAc,EAAA,OAAO,EAAE,SAAA,EAAW,MAAO,EAAA,CAAA;AAAA;AAAA,EAEzC,UAAA,EAAY,MAAM,OAAA,CAAQ,GAAI,EAAA;AAAA,EAC9B,gBAAgB,MAAW,IAAA;AAAA,EAC3B,KAAA,EAAO,CAAC,GAAA,EAAkB,OAC1B,KAAA;AACI,IAAA,MAAM,OAAU,GAAA,IAAI,OAAQ,CAAA,GAAA,EAAK,OAAO,CAAA,CAAA;AAGxC,IAAA,IAAI,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,OAAA,CAAQ,GAAG,CAChC,EAAA;AACI,MAAO,OAAA,KAAA,CAAM,KAAK,OAAO,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAC7B,KAAA;AAII,MAAA,MAAM,UAAU,OAAO,GAAA,KAAQ,WAAW,GAAM,GAAA,SAAA,CAAU,QAAQ,GAAG,CAAA,CAAA;AAGrE,MAAA,MAAM,QAAW,GAAA,KAAA,CAAM,IAAK,CAAA,SAAA,CAAU,OAAO,CAAA,CAAA;AAE7C,MAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,QAAQ,CAC3B,EAAA;AACI,QAAO,MAAA,CAAA,CAAA,gBAAA,EAAmB,QAAQ,CAAE,CAAA,CAAA,CAAA;AAAA,OACxC;AACA,MAAM,MAAA,UAAA,GAAa,EAAG,CAAA,gBAAA,CAAiB,QAAQ,CAAA,CAAA;AAE/C,MAAW,UAAA,CAAA,EAAA,CAAG,QAAQ,MACtB;AACI,QAAQ,OAAA,CAAA,IAAI,SAAS,UAAyC,EAAA;AAAA,UAC1D,KAAK,OAAQ,CAAA,GAAA;AAAA,UACb,MAAQ,EAAA,GAAA;AAAA,UACR,UAAY,EAAA,IAAA;AAAA,UACZ,IAAM,EAAA,EAAA,CAAG,QAAS,CAAA,QAAQ,CAAE,CAAA,IAAA;AAAA,UAC5B,SAAU,OAAgB,CAAA,OAAA;AAAA,SACb,CAAC,CAAA,CAAA;AAAA,OACrB,CAAA,CAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACL;AAAA,EACA,QAAA,EAAU,CAAC,GACX,KAAA;AACI,IAAM,MAAA,MAAA,GAAS,IAAI,SAAU,EAAA,CAAA;AAE7B,IAAO,OAAA,MAAA,CAAO,eAAgB,CAAA,GAAA,EAAK,UAAU,CAAA,CAAA;AAAA,GACjD;AACJ,EAAA;AAEA,QAAA,CAAS,OAAU,GAAA,WAAA;;;;"}